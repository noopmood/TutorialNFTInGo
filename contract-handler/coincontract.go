// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package main

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// CoincontractMetaData contains all meta data concerning the Coincontract contract.
var CoincontractMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintCaller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"mintAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"mintCallerBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"mintAddressBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnCaller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"burnAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b50604051806080016040528060528152602001620031db605291396200003d816200004460201b60201c565b5062000175565b80600290805190602001906200005c92919062000060565b5050565b8280546200006e906200013f565b90600052602060002090601f016020900481019282620000925760008555620000de565b82601f10620000ad57805160ff1916838001178555620000de565b82800160010185558215620000de579182015b82811115620000dd578251825591602001919060010190620000c0565b5b509050620000ed9190620000f1565b5090565b5b808211156200010c576000816000905550600101620000f2565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200015857607f821691505b602082108114156200016f576200016e62000110565b5b50919050565b61305680620001856000396000f3fe608060405234801561001057600080fd5b50600436106100e95760003560e01c80634e1273f41161008c578063d214913611610066578063d214913614610256578063e985e9c514610272578063f242432a146102a2578063f4eb466b146102be576100e9565b80634e1273f4146101ee578063a22cb4651461021e578063d111d8861461023a576100e9565b80632eb2c2d6116100c85780632eb2c2d61461017e5780633663ecae1461019a5780633cdb1414146101b65780633d6fe97e146101d2576100e9565b8062fdd58e146100ee57806301ffc9a71461011e5780630e89341c1461014e575b600080fd5b61010860048036038101906101039190611afe565b6102da565b6040516101159190611b4d565b60405180910390f35b61013860048036038101906101339190611bc0565b6103a3565b6040516101459190611c08565b60405180910390f35b61016860048036038101906101639190611c23565b610485565b6040516101759190611ce9565b60405180910390f35b61019860048036038101906101939190611f08565b610519565b005b6101b460048036038101906101af9190611fd7565b6105ba565b005b6101d060048036038101906101cb9190612062565b6105da565b005b6101ec60048036038101906101e791906120da565b6105f9565b005b610208600480360381019061020391906121dd565b610608565b6040516102159190612313565b60405180910390f35b61023860048036038101906102339190612361565b610721565b005b610254600480360381019061024f91906123a1565b610737565b005b610270600480360381019061026b91906120da565b610757565b005b61028c600480360381019061028791906123f4565b610776565b6040516102999190611c08565b60405180910390f35b6102bc60048036038101906102b79190612434565b61080a565b005b6102d860048036038101906102d391906123a1565b6108ab565b005b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561034b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103429061253d565b60405180910390fd5b60008083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061046e57507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061047e575061047d826108bb565b5b9050919050565b6060600280546104949061258c565b80601f01602080910402602001604051908101604052809291908181526020018280546104c09061258c565b801561050d5780601f106104e25761010080835404028352916020019161050d565b820191906000526020600020905b8154815290600101906020018083116104f057829003601f168201915b50505050509050919050565b610521610925565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610567575061056685610561610925565b610776565b5b6105a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059d90612630565b60405180910390fd5b6105b3858585858561092d565b5050505050565b6105d581848460405180602001604052806000815250610c41565b505050565b6105f533838360405180602001604052806000815250610c41565b5050565b610604338383610e5f565b5050565b6060815183511461064e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610645906126c2565b60405180910390fd5b6000835167ffffffffffffffff81111561066b5761066a611d10565b5b6040519080825280602002602001820160405280156106995781602001602082028036833780820191505090505b50905060005b8451811015610716576106e68582815181106106be576106bd6126e2565b5b60200260200101518583815181106106d9576106d86126e2565b5b60200260200101516102da565b8282815181106106f9576106f86126e2565b5b6020026020010181815250508061070f90612740565b905061069f565b508091505092915050565b61073361072c610925565b838361107c565b5050565b610752818484604051806020016040528060008152506111e9565b505050565b610772338383604051806020016040528060008152506111e9565b5050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610812610925565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610858575061085785610852610925565b610776565b5b610897576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088e906127fb565b60405180910390fd5b6108a4858585858561137f565b5050505050565b6108b6818484610e5f565b505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b8151835114610971576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109689061288d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156109e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d89061291f565b60405180910390fd5b60006109eb610925565b90506109fb818787878787611601565b60005b8451811015610bac576000858281518110610a1c57610a1b6126e2565b5b602002602001015190506000858381518110610a3b57610a3a6126e2565b5b60200260200101519050600080600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610adc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad3906129b1565b60405180910390fd5b81810360008085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610b9191906129d1565b9250508190555050505080610ba590612740565b90506109fe565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610c23929190612a27565b60405180910390a4610c39818787878787611609565b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610cb1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca890612ad0565b60405180910390fd5b8151835114610cf5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cec9061288d565b60405180910390fd5b6000610cff610925565b9050610d1081600087878787611601565b60005b8451811015610dc957838181518110610d2f57610d2e6126e2565b5b6020026020010151600080878481518110610d4d57610d4c6126e2565b5b6020026020010151815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610daf91906129d1565b925050819055508080610dc190612740565b915050610d13565b508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610e41929190612a27565b60405180910390a4610e5881600087878787611609565b5050505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610ecf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec690612b62565b60405180910390fd5b6000610ed9610925565b9050610f0981856000610eeb876117e1565b610ef4876117e1565b60405180602001604052806000815250611601565b600080600085815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610fa0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9790612bf4565b60405180910390fd5b82810360008086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62878760405161106d929190612c14565b60405180910390a45050505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156110eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110e290612caf565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516111dc9190611c08565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611259576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161125090612ad0565b60405180910390fd5b6000611263610925565b905061128481600087611275886117e1565b61127e886117e1565b87611601565b8260008086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546112e391906129d1565b925050819055508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628787604051611361929190612c14565b60405180910390a46113788160008787878761185b565b5050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156113ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113e69061291f565b60405180910390fd5b60006113f9610925565b905061141981878761140a886117e1565b611413886117e1565b87611601565b600080600086815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050838110156114b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114a7906129b1565b60405180910390fd5b83810360008087815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508360008087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461156591906129d1565b925050819055508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6288886040516115e2929190612c14565b60405180910390a46115f882888888888861185b565b50505050505050565b505050505050565b6116288473ffffffffffffffffffffffffffffffffffffffff16611a33565b156117d9578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b815260040161166e959493929190612d33565b6020604051808303816000875af19250505080156116aa57506040513d601f19601f820116820180604052508101906116a79190612db0565b60015b611750576116b6612dea565b806308c379a0141561171357506116cb612e0c565b806116d65750611715565b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161170a9190611ce9565b60405180910390fd5b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161174790612f14565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146117d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117ce90612fa6565b60405180910390fd5b505b505050505050565b60606000600167ffffffffffffffff811115611800576117ff611d10565b5b60405190808252806020026020018201604052801561182e5781602001602082028036833780820191505090505b5090508281600081518110611846576118456126e2565b5b60200260200101818152505080915050919050565b61187a8473ffffffffffffffffffffffffffffffffffffffff16611a33565b15611a2b578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b81526004016118c0959493929190612fc6565b6020604051808303816000875af19250505080156118fc57506040513d601f19601f820116820180604052508101906118f99190612db0565b60015b6119a257611908612dea565b806308c379a01415611965575061191d612e0c565b806119285750611967565b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195c9190611ce9565b60405180910390fd5b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161199990612f14565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611a29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a2090612fa6565b60405180910390fd5b505b505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611a9582611a6a565b9050919050565b611aa581611a8a565b8114611ab057600080fd5b50565b600081359050611ac281611a9c565b92915050565b6000819050919050565b611adb81611ac8565b8114611ae657600080fd5b50565b600081359050611af881611ad2565b92915050565b60008060408385031215611b1557611b14611a60565b5b6000611b2385828601611ab3565b9250506020611b3485828601611ae9565b9150509250929050565b611b4781611ac8565b82525050565b6000602082019050611b626000830184611b3e565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611b9d81611b68565b8114611ba857600080fd5b50565b600081359050611bba81611b94565b92915050565b600060208284031215611bd657611bd5611a60565b5b6000611be484828501611bab565b91505092915050565b60008115159050919050565b611c0281611bed565b82525050565b6000602082019050611c1d6000830184611bf9565b92915050565b600060208284031215611c3957611c38611a60565b5b6000611c4784828501611ae9565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611c8a578082015181840152602081019050611c6f565b83811115611c99576000848401525b50505050565b6000601f19601f8301169050919050565b6000611cbb82611c50565b611cc58185611c5b565b9350611cd5818560208601611c6c565b611cde81611c9f565b840191505092915050565b60006020820190508181036000830152611d038184611cb0565b905092915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611d4882611c9f565b810181811067ffffffffffffffff82111715611d6757611d66611d10565b5b80604052505050565b6000611d7a611a56565b9050611d868282611d3f565b919050565b600067ffffffffffffffff821115611da657611da5611d10565b5b602082029050602081019050919050565b600080fd5b6000611dcf611dca84611d8b565b611d70565b90508083825260208201905060208402830185811115611df257611df1611db7565b5b835b81811015611e1b5780611e078882611ae9565b845260208401935050602081019050611df4565b5050509392505050565b600082601f830112611e3a57611e39611d0b565b5b8135611e4a848260208601611dbc565b91505092915050565b600080fd5b600067ffffffffffffffff821115611e7357611e72611d10565b5b611e7c82611c9f565b9050602081019050919050565b82818337600083830152505050565b6000611eab611ea684611e58565b611d70565b905082815260208101848484011115611ec757611ec6611e53565b5b611ed2848285611e89565b509392505050565b600082601f830112611eef57611eee611d0b565b5b8135611eff848260208601611e98565b91505092915050565b600080600080600060a08688031215611f2457611f23611a60565b5b6000611f3288828901611ab3565b9550506020611f4388828901611ab3565b945050604086013567ffffffffffffffff811115611f6457611f63611a65565b5b611f7088828901611e25565b935050606086013567ffffffffffffffff811115611f9157611f90611a65565b5b611f9d88828901611e25565b925050608086013567ffffffffffffffff811115611fbe57611fbd611a65565b5b611fca88828901611eda565b9150509295509295909350565b600080600060608486031215611ff057611fef611a60565b5b600084013567ffffffffffffffff81111561200e5761200d611a65565b5b61201a86828701611e25565b935050602084013567ffffffffffffffff81111561203b5761203a611a65565b5b61204786828701611e25565b925050604061205886828701611ab3565b9150509250925092565b6000806040838503121561207957612078611a60565b5b600083013567ffffffffffffffff81111561209757612096611a65565b5b6120a385828601611e25565b925050602083013567ffffffffffffffff8111156120c4576120c3611a65565b5b6120d085828601611e25565b9150509250929050565b600080604083850312156120f1576120f0611a60565b5b60006120ff85828601611ae9565b925050602061211085828601611ae9565b9150509250929050565b600067ffffffffffffffff82111561213557612134611d10565b5b602082029050602081019050919050565b60006121596121548461211a565b611d70565b9050808382526020820190506020840283018581111561217c5761217b611db7565b5b835b818110156121a557806121918882611ab3565b84526020840193505060208101905061217e565b5050509392505050565b600082601f8301126121c4576121c3611d0b565b5b81356121d4848260208601612146565b91505092915050565b600080604083850312156121f4576121f3611a60565b5b600083013567ffffffffffffffff81111561221257612211611a65565b5b61221e858286016121af565b925050602083013567ffffffffffffffff81111561223f5761223e611a65565b5b61224b85828601611e25565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61228a81611ac8565b82525050565b600061229c8383612281565b60208301905092915050565b6000602082019050919050565b60006122c082612255565b6122ca8185612260565b93506122d583612271565b8060005b838110156123065781516122ed8882612290565b97506122f8836122a8565b9250506001810190506122d9565b5085935050505092915050565b6000602082019050818103600083015261232d81846122b5565b905092915050565b61233e81611bed565b811461234957600080fd5b50565b60008135905061235b81612335565b92915050565b6000806040838503121561237857612377611a60565b5b600061238685828601611ab3565b92505060206123978582860161234c565b9150509250929050565b6000806000606084860312156123ba576123b9611a60565b5b60006123c886828701611ae9565b93505060206123d986828701611ae9565b92505060406123ea86828701611ab3565b9150509250925092565b6000806040838503121561240b5761240a611a60565b5b600061241985828601611ab3565b925050602061242a85828601611ab3565b9150509250929050565b600080600080600060a086880312156124505761244f611a60565b5b600061245e88828901611ab3565b955050602061246f88828901611ab3565b945050604061248088828901611ae9565b935050606061249188828901611ae9565b925050608086013567ffffffffffffffff8111156124b2576124b1611a65565b5b6124be88828901611eda565b9150509295509295909350565b7f455243313135353a2062616c616e636520717565727920666f7220746865207a60008201527f65726f2061646472657373000000000000000000000000000000000000000000602082015250565b6000612527602b83611c5b565b9150612532826124cb565b604082019050919050565b600060208201905081810360008301526125568161251a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806125a457607f821691505b602082108114156125b8576125b761255d565b5b50919050565b7f455243313135353a207472616e736665722063616c6c6572206973206e6f742060008201527f6f776e6572206e6f7220617070726f7665640000000000000000000000000000602082015250565b600061261a603283611c5b565b9150612625826125be565b604082019050919050565b600060208201905081810360008301526126498161260d565b9050919050565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b60006126ac602983611c5b565b91506126b782612650565b604082019050919050565b600060208201905081810360008301526126db8161269f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061274b82611ac8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561277e5761277d612711565b5b600182019050919050565b7f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260008201527f20617070726f7665640000000000000000000000000000000000000000000000602082015250565b60006127e5602983611c5b565b91506127f082612789565b604082019050919050565b60006020820190508181036000830152612814816127d8565b9050919050565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b6000612877602883611c5b565b91506128828261281b565b604082019050919050565b600060208201905081810360008301526128a68161286a565b9050919050565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000612909602583611c5b565b9150612914826128ad565b604082019050919050565b60006020820190508181036000830152612938816128fc565b9050919050565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b600061299b602a83611c5b565b91506129a68261293f565b604082019050919050565b600060208201905081810360008301526129ca8161298e565b9050919050565b60006129dc82611ac8565b91506129e783611ac8565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612a1c57612a1b612711565b5b828201905092915050565b60006040820190508181036000830152612a4181856122b5565b90508181036020830152612a5581846122b5565b90509392505050565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000612aba602183611c5b565b9150612ac582612a5e565b604082019050919050565b60006020820190508181036000830152612ae981612aad565b9050919050565b7f455243313135353a206275726e2066726f6d20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000612b4c602383611c5b565b9150612b5782612af0565b604082019050919050565b60006020820190508181036000830152612b7b81612b3f565b9050919050565b7f455243313135353a206275726e20616d6f756e7420657863656564732062616c60008201527f616e636500000000000000000000000000000000000000000000000000000000602082015250565b6000612bde602483611c5b565b9150612be982612b82565b604082019050919050565b60006020820190508181036000830152612c0d81612bd1565b9050919050565b6000604082019050612c296000830185611b3e565b612c366020830184611b3e565b9392505050565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b6000612c99602983611c5b565b9150612ca482612c3d565b604082019050919050565b60006020820190508181036000830152612cc881612c8c565b9050919050565b612cd881611a8a565b82525050565b600081519050919050565b600082825260208201905092915050565b6000612d0582612cde565b612d0f8185612ce9565b9350612d1f818560208601611c6c565b612d2881611c9f565b840191505092915050565b600060a082019050612d486000830188612ccf565b612d556020830187612ccf565b8181036040830152612d6781866122b5565b90508181036060830152612d7b81856122b5565b90508181036080830152612d8f8184612cfa565b90509695505050505050565b600081519050612daa81611b94565b92915050565b600060208284031215612dc657612dc5611a60565b5b6000612dd484828501612d9b565b91505092915050565b60008160e01c9050919050565b600060033d1115612e095760046000803e612e06600051612ddd565b90505b90565b600060443d1015612e1c57612e9f565b612e24611a56565b60043d036004823e80513d602482011167ffffffffffffffff82111715612e4c575050612e9f565b808201805167ffffffffffffffff811115612e6a5750505050612e9f565b80602083010160043d038501811115612e87575050505050612e9f565b612e9682602001850186611d3f565b82955050505050505b90565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b6000612efe603483611c5b565b9150612f0982612ea2565b604082019050919050565b60006020820190508181036000830152612f2d81612ef1565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b6000612f90602883611c5b565b9150612f9b82612f34565b604082019050919050565b60006020820190508181036000830152612fbf81612f83565b9050919050565b600060a082019050612fdb6000830188612ccf565b612fe86020830187612ccf565b612ff56040830186611b3e565b6130026060830185611b3e565b81810360808301526130148184612cfa565b9050969550505050505056fea2646970667358221220207a8bb83e777c6c4f879a6af785b15d552248b96aa72abe282a7e71ab529d6f64736f6c634300080c003368747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6e6f6f706d6f6f642f5475746f7269616c4e4654496e476f2f6d61696e2f6d657461646174612f7b69647d2e6a736f6e",
}

// CoincontractABI is the input ABI used to generate the binding from.
// Deprecated: Use CoincontractMetaData.ABI instead.
var CoincontractABI = CoincontractMetaData.ABI

// CoincontractBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use CoincontractMetaData.Bin instead.
var CoincontractBin = CoincontractMetaData.Bin

// DeployCoincontract deploys a new Ethereum contract, binding an instance of Coincontract to it.
func DeployCoincontract(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Coincontract, error) {
	parsed, err := CoincontractMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CoincontractBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Coincontract{CoincontractCaller: CoincontractCaller{contract: contract}, CoincontractTransactor: CoincontractTransactor{contract: contract}, CoincontractFilterer: CoincontractFilterer{contract: contract}}, nil
}

// Coincontract is an auto generated Go binding around an Ethereum contract.
type Coincontract struct {
	CoincontractCaller     // Read-only binding to the contract
	CoincontractTransactor // Write-only binding to the contract
	CoincontractFilterer   // Log filterer for contract events
}

// CoincontractCaller is an auto generated read-only Go binding around an Ethereum contract.
type CoincontractCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CoincontractTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CoincontractTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CoincontractFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CoincontractFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CoincontractSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CoincontractSession struct {
	Contract     *Coincontract     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CoincontractCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CoincontractCallerSession struct {
	Contract *CoincontractCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// CoincontractTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CoincontractTransactorSession struct {
	Contract     *CoincontractTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// CoincontractRaw is an auto generated low-level Go binding around an Ethereum contract.
type CoincontractRaw struct {
	Contract *Coincontract // Generic contract binding to access the raw methods on
}

// CoincontractCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CoincontractCallerRaw struct {
	Contract *CoincontractCaller // Generic read-only contract binding to access the raw methods on
}

// CoincontractTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CoincontractTransactorRaw struct {
	Contract *CoincontractTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCoincontract creates a new instance of Coincontract, bound to a specific deployed contract.
func NewCoincontract(address common.Address, backend bind.ContractBackend) (*Coincontract, error) {
	contract, err := bindCoincontract(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Coincontract{CoincontractCaller: CoincontractCaller{contract: contract}, CoincontractTransactor: CoincontractTransactor{contract: contract}, CoincontractFilterer: CoincontractFilterer{contract: contract}}, nil
}

// NewCoincontractCaller creates a new read-only instance of Coincontract, bound to a specific deployed contract.
func NewCoincontractCaller(address common.Address, caller bind.ContractCaller) (*CoincontractCaller, error) {
	contract, err := bindCoincontract(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CoincontractCaller{contract: contract}, nil
}

// NewCoincontractTransactor creates a new write-only instance of Coincontract, bound to a specific deployed contract.
func NewCoincontractTransactor(address common.Address, transactor bind.ContractTransactor) (*CoincontractTransactor, error) {
	contract, err := bindCoincontract(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CoincontractTransactor{contract: contract}, nil
}

// NewCoincontractFilterer creates a new log filterer instance of Coincontract, bound to a specific deployed contract.
func NewCoincontractFilterer(address common.Address, filterer bind.ContractFilterer) (*CoincontractFilterer, error) {
	contract, err := bindCoincontract(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CoincontractFilterer{contract: contract}, nil
}

// bindCoincontract binds a generic wrapper to an already deployed contract.
func bindCoincontract(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(CoincontractABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Coincontract *CoincontractRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Coincontract.Contract.CoincontractCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Coincontract *CoincontractRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Coincontract.Contract.CoincontractTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Coincontract *CoincontractRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Coincontract.Contract.CoincontractTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Coincontract *CoincontractCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Coincontract.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Coincontract *CoincontractTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Coincontract.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Coincontract *CoincontractTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Coincontract.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_Coincontract *CoincontractCaller) BalanceOf(opts *bind.CallOpts, account common.Address, id *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Coincontract.contract.Call(opts, &out, "balanceOf", account, id)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_Coincontract *CoincontractSession) BalanceOf(account common.Address, id *big.Int) (*big.Int, error) {
	return _Coincontract.Contract.BalanceOf(&_Coincontract.CallOpts, account, id)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_Coincontract *CoincontractCallerSession) BalanceOf(account common.Address, id *big.Int) (*big.Int, error) {
	return _Coincontract.Contract.BalanceOf(&_Coincontract.CallOpts, account, id)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_Coincontract *CoincontractCaller) BalanceOfBatch(opts *bind.CallOpts, accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	var out []interface{}
	err := _Coincontract.contract.Call(opts, &out, "balanceOfBatch", accounts, ids)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_Coincontract *CoincontractSession) BalanceOfBatch(accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	return _Coincontract.Contract.BalanceOfBatch(&_Coincontract.CallOpts, accounts, ids)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_Coincontract *CoincontractCallerSession) BalanceOfBatch(accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	return _Coincontract.Contract.BalanceOfBatch(&_Coincontract.CallOpts, accounts, ids)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_Coincontract *CoincontractCaller) IsApprovedForAll(opts *bind.CallOpts, account common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _Coincontract.contract.Call(opts, &out, "isApprovedForAll", account, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_Coincontract *CoincontractSession) IsApprovedForAll(account common.Address, operator common.Address) (bool, error) {
	return _Coincontract.Contract.IsApprovedForAll(&_Coincontract.CallOpts, account, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_Coincontract *CoincontractCallerSession) IsApprovedForAll(account common.Address, operator common.Address) (bool, error) {
	return _Coincontract.Contract.IsApprovedForAll(&_Coincontract.CallOpts, account, operator)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Coincontract *CoincontractCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _Coincontract.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Coincontract *CoincontractSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Coincontract.Contract.SupportsInterface(&_Coincontract.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Coincontract *CoincontractCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Coincontract.Contract.SupportsInterface(&_Coincontract.CallOpts, interfaceId)
}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 ) view returns(string)
func (_Coincontract *CoincontractCaller) Uri(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _Coincontract.contract.Call(opts, &out, "uri", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 ) view returns(string)
func (_Coincontract *CoincontractSession) Uri(arg0 *big.Int) (string, error) {
	return _Coincontract.Contract.Uri(&_Coincontract.CallOpts, arg0)
}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 ) view returns(string)
func (_Coincontract *CoincontractCallerSession) Uri(arg0 *big.Int) (string, error) {
	return _Coincontract.Contract.Uri(&_Coincontract.CallOpts, arg0)
}

// BurnAddress is a paid mutator transaction binding the contract method 0xf4eb466b.
//
// Solidity: function burnAddress(uint256 tokenId, uint256 amount, address addr) returns()
func (_Coincontract *CoincontractTransactor) BurnAddress(opts *bind.TransactOpts, tokenId *big.Int, amount *big.Int, addr common.Address) (*types.Transaction, error) {
	return _Coincontract.contract.Transact(opts, "burnAddress", tokenId, amount, addr)
}

// BurnAddress is a paid mutator transaction binding the contract method 0xf4eb466b.
//
// Solidity: function burnAddress(uint256 tokenId, uint256 amount, address addr) returns()
func (_Coincontract *CoincontractSession) BurnAddress(tokenId *big.Int, amount *big.Int, addr common.Address) (*types.Transaction, error) {
	return _Coincontract.Contract.BurnAddress(&_Coincontract.TransactOpts, tokenId, amount, addr)
}

// BurnAddress is a paid mutator transaction binding the contract method 0xf4eb466b.
//
// Solidity: function burnAddress(uint256 tokenId, uint256 amount, address addr) returns()
func (_Coincontract *CoincontractTransactorSession) BurnAddress(tokenId *big.Int, amount *big.Int, addr common.Address) (*types.Transaction, error) {
	return _Coincontract.Contract.BurnAddress(&_Coincontract.TransactOpts, tokenId, amount, addr)
}

// BurnCaller is a paid mutator transaction binding the contract method 0x3d6fe97e.
//
// Solidity: function burnCaller(uint256 tokenId, uint256 amount) returns()
func (_Coincontract *CoincontractTransactor) BurnCaller(opts *bind.TransactOpts, tokenId *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _Coincontract.contract.Transact(opts, "burnCaller", tokenId, amount)
}

// BurnCaller is a paid mutator transaction binding the contract method 0x3d6fe97e.
//
// Solidity: function burnCaller(uint256 tokenId, uint256 amount) returns()
func (_Coincontract *CoincontractSession) BurnCaller(tokenId *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _Coincontract.Contract.BurnCaller(&_Coincontract.TransactOpts, tokenId, amount)
}

// BurnCaller is a paid mutator transaction binding the contract method 0x3d6fe97e.
//
// Solidity: function burnCaller(uint256 tokenId, uint256 amount) returns()
func (_Coincontract *CoincontractTransactorSession) BurnCaller(tokenId *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _Coincontract.Contract.BurnCaller(&_Coincontract.TransactOpts, tokenId, amount)
}

// MintAddress is a paid mutator transaction binding the contract method 0xd111d886.
//
// Solidity: function mintAddress(uint256 tokenId, uint256 amount, address addr) returns()
func (_Coincontract *CoincontractTransactor) MintAddress(opts *bind.TransactOpts, tokenId *big.Int, amount *big.Int, addr common.Address) (*types.Transaction, error) {
	return _Coincontract.contract.Transact(opts, "mintAddress", tokenId, amount, addr)
}

// MintAddress is a paid mutator transaction binding the contract method 0xd111d886.
//
// Solidity: function mintAddress(uint256 tokenId, uint256 amount, address addr) returns()
func (_Coincontract *CoincontractSession) MintAddress(tokenId *big.Int, amount *big.Int, addr common.Address) (*types.Transaction, error) {
	return _Coincontract.Contract.MintAddress(&_Coincontract.TransactOpts, tokenId, amount, addr)
}

// MintAddress is a paid mutator transaction binding the contract method 0xd111d886.
//
// Solidity: function mintAddress(uint256 tokenId, uint256 amount, address addr) returns()
func (_Coincontract *CoincontractTransactorSession) MintAddress(tokenId *big.Int, amount *big.Int, addr common.Address) (*types.Transaction, error) {
	return _Coincontract.Contract.MintAddress(&_Coincontract.TransactOpts, tokenId, amount, addr)
}

// MintAddressBatch is a paid mutator transaction binding the contract method 0x3663ecae.
//
// Solidity: function mintAddressBatch(uint256[] tokenIds, uint256[] amounts, address addr) returns()
func (_Coincontract *CoincontractTransactor) MintAddressBatch(opts *bind.TransactOpts, tokenIds []*big.Int, amounts []*big.Int, addr common.Address) (*types.Transaction, error) {
	return _Coincontract.contract.Transact(opts, "mintAddressBatch", tokenIds, amounts, addr)
}

// MintAddressBatch is a paid mutator transaction binding the contract method 0x3663ecae.
//
// Solidity: function mintAddressBatch(uint256[] tokenIds, uint256[] amounts, address addr) returns()
func (_Coincontract *CoincontractSession) MintAddressBatch(tokenIds []*big.Int, amounts []*big.Int, addr common.Address) (*types.Transaction, error) {
	return _Coincontract.Contract.MintAddressBatch(&_Coincontract.TransactOpts, tokenIds, amounts, addr)
}

// MintAddressBatch is a paid mutator transaction binding the contract method 0x3663ecae.
//
// Solidity: function mintAddressBatch(uint256[] tokenIds, uint256[] amounts, address addr) returns()
func (_Coincontract *CoincontractTransactorSession) MintAddressBatch(tokenIds []*big.Int, amounts []*big.Int, addr common.Address) (*types.Transaction, error) {
	return _Coincontract.Contract.MintAddressBatch(&_Coincontract.TransactOpts, tokenIds, amounts, addr)
}

// MintCaller is a paid mutator transaction binding the contract method 0xd2149136.
//
// Solidity: function mintCaller(uint256 tokenId, uint256 amount) returns()
func (_Coincontract *CoincontractTransactor) MintCaller(opts *bind.TransactOpts, tokenId *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _Coincontract.contract.Transact(opts, "mintCaller", tokenId, amount)
}

// MintCaller is a paid mutator transaction binding the contract method 0xd2149136.
//
// Solidity: function mintCaller(uint256 tokenId, uint256 amount) returns()
func (_Coincontract *CoincontractSession) MintCaller(tokenId *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _Coincontract.Contract.MintCaller(&_Coincontract.TransactOpts, tokenId, amount)
}

// MintCaller is a paid mutator transaction binding the contract method 0xd2149136.
//
// Solidity: function mintCaller(uint256 tokenId, uint256 amount) returns()
func (_Coincontract *CoincontractTransactorSession) MintCaller(tokenId *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _Coincontract.Contract.MintCaller(&_Coincontract.TransactOpts, tokenId, amount)
}

// MintCallerBatch is a paid mutator transaction binding the contract method 0x3cdb1414.
//
// Solidity: function mintCallerBatch(uint256[] tokenIds, uint256[] amounts) returns()
func (_Coincontract *CoincontractTransactor) MintCallerBatch(opts *bind.TransactOpts, tokenIds []*big.Int, amounts []*big.Int) (*types.Transaction, error) {
	return _Coincontract.contract.Transact(opts, "mintCallerBatch", tokenIds, amounts)
}

// MintCallerBatch is a paid mutator transaction binding the contract method 0x3cdb1414.
//
// Solidity: function mintCallerBatch(uint256[] tokenIds, uint256[] amounts) returns()
func (_Coincontract *CoincontractSession) MintCallerBatch(tokenIds []*big.Int, amounts []*big.Int) (*types.Transaction, error) {
	return _Coincontract.Contract.MintCallerBatch(&_Coincontract.TransactOpts, tokenIds, amounts)
}

// MintCallerBatch is a paid mutator transaction binding the contract method 0x3cdb1414.
//
// Solidity: function mintCallerBatch(uint256[] tokenIds, uint256[] amounts) returns()
func (_Coincontract *CoincontractTransactorSession) MintCallerBatch(tokenIds []*big.Int, amounts []*big.Int) (*types.Transaction, error) {
	return _Coincontract.Contract.MintCallerBatch(&_Coincontract.TransactOpts, tokenIds, amounts)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_Coincontract *CoincontractTransactor) SafeBatchTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _Coincontract.contract.Transact(opts, "safeBatchTransferFrom", from, to, ids, amounts, data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_Coincontract *CoincontractSession) SafeBatchTransferFrom(from common.Address, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _Coincontract.Contract.SafeBatchTransferFrom(&_Coincontract.TransactOpts, from, to, ids, amounts, data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_Coincontract *CoincontractTransactorSession) SafeBatchTransferFrom(from common.Address, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _Coincontract.Contract.SafeBatchTransferFrom(&_Coincontract.TransactOpts, from, to, ids, amounts, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns()
func (_Coincontract *CoincontractTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _Coincontract.contract.Transact(opts, "safeTransferFrom", from, to, id, amount, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns()
func (_Coincontract *CoincontractSession) SafeTransferFrom(from common.Address, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _Coincontract.Contract.SafeTransferFrom(&_Coincontract.TransactOpts, from, to, id, amount, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns()
func (_Coincontract *CoincontractTransactorSession) SafeTransferFrom(from common.Address, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _Coincontract.Contract.SafeTransferFrom(&_Coincontract.TransactOpts, from, to, id, amount, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Coincontract *CoincontractTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _Coincontract.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Coincontract *CoincontractSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Coincontract.Contract.SetApprovalForAll(&_Coincontract.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Coincontract *CoincontractTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Coincontract.Contract.SetApprovalForAll(&_Coincontract.TransactOpts, operator, approved)
}

// CoincontractApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the Coincontract contract.
type CoincontractApprovalForAllIterator struct {
	Event *CoincontractApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CoincontractApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CoincontractApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CoincontractApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CoincontractApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CoincontractApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CoincontractApprovalForAll represents a ApprovalForAll event raised by the Coincontract contract.
type CoincontractApprovalForAll struct {
	Account  common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_Coincontract *CoincontractFilterer) FilterApprovalForAll(opts *bind.FilterOpts, account []common.Address, operator []common.Address) (*CoincontractApprovalForAllIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Coincontract.contract.FilterLogs(opts, "ApprovalForAll", accountRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &CoincontractApprovalForAllIterator{contract: _Coincontract.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_Coincontract *CoincontractFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *CoincontractApprovalForAll, account []common.Address, operator []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Coincontract.contract.WatchLogs(opts, "ApprovalForAll", accountRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CoincontractApprovalForAll)
				if err := _Coincontract.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_Coincontract *CoincontractFilterer) ParseApprovalForAll(log types.Log) (*CoincontractApprovalForAll, error) {
	event := new(CoincontractApprovalForAll)
	if err := _Coincontract.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CoincontractTransferBatchIterator is returned from FilterTransferBatch and is used to iterate over the raw logs and unpacked data for TransferBatch events raised by the Coincontract contract.
type CoincontractTransferBatchIterator struct {
	Event *CoincontractTransferBatch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CoincontractTransferBatchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CoincontractTransferBatch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CoincontractTransferBatch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CoincontractTransferBatchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CoincontractTransferBatchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CoincontractTransferBatch represents a TransferBatch event raised by the Coincontract contract.
type CoincontractTransferBatch struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	Ids      []*big.Int
	Values   []*big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferBatch is a free log retrieval operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_Coincontract *CoincontractFilterer) FilterTransferBatch(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*CoincontractTransferBatchIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Coincontract.contract.FilterLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &CoincontractTransferBatchIterator{contract: _Coincontract.contract, event: "TransferBatch", logs: logs, sub: sub}, nil
}

// WatchTransferBatch is a free log subscription operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_Coincontract *CoincontractFilterer) WatchTransferBatch(opts *bind.WatchOpts, sink chan<- *CoincontractTransferBatch, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Coincontract.contract.WatchLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CoincontractTransferBatch)
				if err := _Coincontract.contract.UnpackLog(event, "TransferBatch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferBatch is a log parse operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_Coincontract *CoincontractFilterer) ParseTransferBatch(log types.Log) (*CoincontractTransferBatch, error) {
	event := new(CoincontractTransferBatch)
	if err := _Coincontract.contract.UnpackLog(event, "TransferBatch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CoincontractTransferSingleIterator is returned from FilterTransferSingle and is used to iterate over the raw logs and unpacked data for TransferSingle events raised by the Coincontract contract.
type CoincontractTransferSingleIterator struct {
	Event *CoincontractTransferSingle // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CoincontractTransferSingleIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CoincontractTransferSingle)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CoincontractTransferSingle)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CoincontractTransferSingleIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CoincontractTransferSingleIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CoincontractTransferSingle represents a TransferSingle event raised by the Coincontract contract.
type CoincontractTransferSingle struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	Id       *big.Int
	Value    *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferSingle is a free log retrieval operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_Coincontract *CoincontractFilterer) FilterTransferSingle(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*CoincontractTransferSingleIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Coincontract.contract.FilterLogs(opts, "TransferSingle", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &CoincontractTransferSingleIterator{contract: _Coincontract.contract, event: "TransferSingle", logs: logs, sub: sub}, nil
}

// WatchTransferSingle is a free log subscription operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_Coincontract *CoincontractFilterer) WatchTransferSingle(opts *bind.WatchOpts, sink chan<- *CoincontractTransferSingle, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Coincontract.contract.WatchLogs(opts, "TransferSingle", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CoincontractTransferSingle)
				if err := _Coincontract.contract.UnpackLog(event, "TransferSingle", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferSingle is a log parse operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_Coincontract *CoincontractFilterer) ParseTransferSingle(log types.Log) (*CoincontractTransferSingle, error) {
	event := new(CoincontractTransferSingle)
	if err := _Coincontract.contract.UnpackLog(event, "TransferSingle", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CoincontractURIIterator is returned from FilterURI and is used to iterate over the raw logs and unpacked data for URI events raised by the Coincontract contract.
type CoincontractURIIterator struct {
	Event *CoincontractURI // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CoincontractURIIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CoincontractURI)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CoincontractURI)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CoincontractURIIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CoincontractURIIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CoincontractURI represents a URI event raised by the Coincontract contract.
type CoincontractURI struct {
	Value string
	Id    *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterURI is a free log retrieval operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_Coincontract *CoincontractFilterer) FilterURI(opts *bind.FilterOpts, id []*big.Int) (*CoincontractURIIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _Coincontract.contract.FilterLogs(opts, "URI", idRule)
	if err != nil {
		return nil, err
	}
	return &CoincontractURIIterator{contract: _Coincontract.contract, event: "URI", logs: logs, sub: sub}, nil
}

// WatchURI is a free log subscription operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_Coincontract *CoincontractFilterer) WatchURI(opts *bind.WatchOpts, sink chan<- *CoincontractURI, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _Coincontract.contract.WatchLogs(opts, "URI", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CoincontractURI)
				if err := _Coincontract.contract.UnpackLog(event, "URI", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseURI is a log parse operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_Coincontract *CoincontractFilterer) ParseURI(log types.Log) (*CoincontractURI, error) {
	event := new(CoincontractURI)
	if err := _Coincontract.contract.UnpackLog(event, "URI", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
